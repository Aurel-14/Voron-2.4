###################################
######  MAX_FLOW_CALIBRATE   ######
###################################
# Written by fboc#1751 
# @version: 1.0

# CHANGELOG:
#   v1.0beta: beta release
#   v1.0: Fix raft speed, multiple extruder security test, math issues. Add entry settings, security tests and startup warnings 

# What is it ? 
# A bunch of macros to determine max flow value. Dark filaments gives better results as underextrusion
# could be tricky to find on some printers 

# Sources : https://manual.slic3r.org/advanced/flow-math
#
# WARNING : This macros uses MAX_VELOCITY, Z_MAX_VELOCITYY and MAX_ACCEL of your printer settings. Be sure you can extrude with this settings otherwise
#           these settings can be override with MAX_SPEED and MAX_ACCEL params 
# Usage:
#   1. Make sure your axis are homed, your bed mesh is loaded (if you are using one), both the hotend and the bed are at the temperature required for your filament
#      and the machine ready to print something.
#   2. Print the shell by typing in the klipper console (using Mainsail/Fluidd/Octoprint):
#      MAX_FLOW_CALIBRATION [args... like START_FLOW=4]
#   3. Check the print to track under extrusion (a backlight can help) between the 2 lines, Measure the pattern form bottom to under extruded zone
#      and call the computation macro with it: COMPUTE_MAX_FLOW LENGTH=xxxx in mm
#   -> You will see the computed max_flow printed in the console. You can then copy and paste it in your prefered slicer.

# Available input parameters for MAX_FLOW_CALIBRATION :
#    START_FLOW          : default(4)     min flow in mm^3/s at start
#    END_FLOW            : default(30)    max flow to test in mm^3/s
#    SIZE                : default("70,70") width, length in mm, size that the test will use on the bed. The model will be printed in the middle of the bed
#    FILAMENT_DIAMETER   : default(1.75)  diameter of the filament currently loaded in the machine
#    RETRACT_LENGTH      : default(0.5)   retraction length in mm. Set it to 0 if you do not retract
#    RETRACT_SPEED       : default(40)    retraction speed in mm/s
#    EXTRUSION_WIDTH     : default(0.4)   width of an extrusion line (used as a goal). Using 0.4 for a 0.4mm diameter nozzle is a safe bet
#    EXTRUSION_MULTIPLIER: default(0.93)  extrusion multiplier for the calibration
#    LAYER_HEIGHT        : default(0.2)   layer height of the print. Avoid too small layer height and try to be close to 0.5 * nozzle diameter
#    PURGE_MM            : default(2)     Spot purge length at initial startup. mm of filamanet to purge
#    RAFT_MARGIN         : default(1,1)   extra margin in mm for the raft, extend test zone in  x,y
#    RAFT_SPEED          : default(60)    feedrate (in mm/s) for printing the raft
#    TRAVEL_SPEED        : default(200)
#    MAX_ACCEL           : default(printer max_accel) 
#    MAX_SPEED           : default(printer max_velocity)
#    Z_SPEED             : default(printer z_max_velocity/2)
#    COORDS              : default(center of the buildplate) center x,y position of the test on the buildplate 

# ================================================================================================================================================
# DO NOT MODIFY THOSE VARIABLES (they are used internaly by the flow calibration macro)

[gcode_macro _MAX_FLOW_VARIABLES]
variable_start_flow: 0.0
variable_end_flow: 0.0
variable_test_length: 0.0
gcode:

[gcode_macro MAX_FLOW_CALIBRATION]
gcode:
    ## Get input parameters
    {% set start_flow = params.START_FLOW|default(4)|float %}  # min FLOW to test
    {% set end_flow = params.END_FLOW|default(30)|float %}     # max FLOW to test
    {% set width, test_length = (params.SIZE|default("70,70")).split(',')|map("trim")|map('float') %} # size of the test area "width,length"
    {% set e_w = params.EXTRUSION_WIDTH|default(0.45)|float %}  # extrusion width default for 0.4 nozzle
    {% set e_h = params.LAYER_HEIGHT|default(0.2)|float %}      # layer height
    {% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.93)|float %} # extrusion multiplier for the calibration
    {% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %} # filament diameter uses by math
    {% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}  # retraction length
    {% set feedrate_retract = params.RETRACT_SPEED|default(40)|float * 60 %} # retraction feedrate
    {% set purge_length = params.PURGE_MM|default(2) %}         # purge length

    {% set x_margin,y_margin = (params.RAFT_MARGIN|default("1,1")).split(",")|map("trim")|map("float") %} # margins of the raft in x and y
    {% set feedrate_raft = params.RAFT_SPEED|default(20/(e_w**2))|int * 60 %} # raft feedrate
    {% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %} # travel feedrate
    {% set accel  = params.MAX_ACCEL|default(printer.configfile.settings.printer.max_accel)|int %} # max accel limit to determine ability to start calibration
    {% set max_speed  = params.MAX_SPEED|default(printer.configfile.settings.printer.max_velocity)|int %} # max speed to determine ability to start calibration
    {% set feedrate_z = params.Z_SPEED|default(printer.configfile.settings.printer.max_z_velocity/2)|int * 60 %} # z feedrate 
    {% set x_center, y_center = (params.COORDS|default("0,0")).split(",")|map("trim")|map("float") %} # position of test on the buildplate
    
    ## Get printer config variables    
    {% set x_min = printer.configfile.config.stepper_x.position_min|default(0)|float + 20 %}
    {% set x_max = printer.configfile.config.stepper_x.position_max|float - 20 %}
    {% set y_min = printer.configfile.config.stepper_y.position_min|default(0)|float + 20 %}
    {% set y_max = printer.configfile.config.stepper_y.position_max|float - 20 %}
    
    ## Store parameters for COMPUTE_MAX_FLOW
    SET_GCODE_VARIABLE MACRO=_MAX_FLOW_VARIABLES VARIABLE=start_flow VALUE={start_flow}
    SET_GCODE_VARIABLE MACRO=_MAX_FLOW_VARIABLES VARIABLE=end_flow VALUE={end_flow}
    SET_GCODE_VARIABLE MACRO=_MAX_FLOW_VARIABLES VARIABLE=test_length VALUE={test_length}
    
    ## Compute variables
    {% set pi = 3.14159 %}
    {% set filament_area = pi*(filament_diameter/2)**2 %}
    {% set void_area_raft = ((e_w - e_h)*1.5)*(e_h*1.5) + pi * (e_h*0.75)**2  %}
    {% set spacing_raft = e_w*1.6 %}
    
    {% set void_area = (e_w - e_h)*e_h + pi * (e_h/2)**2 %}
    {% set spacing = e_w - e_h * (1 - (pi/4)) %}
    
    {% set top_speed = end_flow / void_area %}
    {% set max_accel_length = top_speed**2/accel %}
    {% set max_flow = void_area * max_speed|float %}
    {% set x_center = x_center if x_center > 0 else (x_max + x_min) / 2  %}
    {% set y_center = y_center if y_center > 0 else (y_max + y_min) / 2 %}
    {% set x_start = x_center - width / 2 %}
    {% set y_start = y_center - test_length / 2 %}
    {% set x_end = x_center + width / 2 %}
    {% set y_end = y_center + test_length / 2 %}

    ## Check availability of settings
    {% if max_speed > printer.configfile.settings.printer.max_velocity %}
        {action_raise_error("MAX_SPEED cannot be greater than printer settings ")}
    {% endif %}
    {% if accel > printer.configfile.settings.printer.max_accel %}
        {action_raise_error("MAX_ACCEL cannot be greater than printer settings ")}
    {% endif %}
    {% if max_flow < end_flow %}
        {action_raise_error("max_velocity limitation : You cannot reach %.1f mm^3/s with your settings" % max_flow
                        + " you should either increase EXTRUSION_WITH/EXTRUSION_HEIGHT or reduce END_FLOW")}
    {% endif %}
    {% if max_accel_length > width/2 - 10 %}
        {action_raise_error("max_accel limitation : Your settings does not allow to test max_flow "
                        + " you should either reduce END_FLOW or increase SIZE width")}
    {% endif %}
   
    
    ## Display usage
    {action_respond_info("\nStarting max_flow calibration print\n" +
                        "This operation can not be interrupted by normal means." + 
                        " Hit the \"emergency stop\" button or print \"M112\" in console to stop it if needed\n\n" +
                        "  Start flow : %.1f mm^3/s\n" % start_flow +
                        "  End flow : %.1f mm^3/s\n\n" % end_flow +
                        "When the printing pattern will be done, measure from the bottom to the first underextruded zone in mm." +
                        " Use a backlight can help to determine underextrusion zone.\n" +
                        " Then use COMPUTE_MAX_FLOW LENGTH=\<measure in mm\> to obtain the maximum flow value.\n")}

    {% if printer[printer.toolhead.extruder].can_extrude == True %}
        SAVE_GCODE_STATE ID=MAX_FLOW_CALIBRATION_STATE
        # apply max velocity if modified previously 
        SET_VELOCITY_LIMIT VELOCITY={max_speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
        
        M221 S{e_multiplier*100} # apply extrusion multiplier
        M220 S100 # reset printer speed to 100%

        G92 E0 # reset extruder
        M83 # relative extrusion
        G90 # absolute coordinates
        G0 X{x_start - x_margin} Y{y_start - y_margin} F{feedrate_travel} # move to start point
        
        #
        ## Do Raft
        #
        G0 Z{1.5*e_h} F{feedrate_z}
        G0 E{purge_length} F{feedrate_raft/2} # initial purge spot
        
        G91 # relative coordinates
        {% for i in range(((width+x_margin*2)/spacing_raft)|int) %}
            G0 Y{ loop.cycle(test_length+y_margin*2,0-test_length-y_margin*2)} E{void_area_raft * (test_length + y_margin * 2 ) / filament_area} F{feedrate_raft}
            {% if not loop.last %}
                G0 X{spacing_raft} F{feedrate_travel}
            {% else %}
                G90
                G0 Y{y_start - y_margin} F{feedrate_travel}
                G91
            {% endif %}
        {% endfor %}
        G0 X-{width+x_margin*2} E{void_area_raft * (width + x_margin * 2 ) / filament_area} F{feedrate_raft} # bottom raft line
        G90 G90 # absolute coordinates
        G0 E-{retract_length} F{feedrate_retract} #retract
        G0 Z{2.5*e_h} F{feedrate_z}
    
        #
        ## Draw lines increasing velocity
        #
        {% set _last_flow = 0 %}
        {% for l in range((test_length/spacing)|int + 1)%}
            {% set test_flow = start_flow + l / ((test_length/spacing)|int)*(end_flow-start_flow) %}
            {% set test_speed = test_flow/void_area %}  #
            {% set test_width = 2*test_speed**2/accel + width - 2*max_accel_length %} # test width depends of acceleration
            {% set test_way=loop.cycle(1,-1) %} # motion way variable
            
            # Echo current test values
            
            M117 {"Flow %.1f mm^3/s" % test_flow}
            M118 {"Flow %.1f mm^3/s / Speed %.1f mm/s" % (test_flow,test_speed)}
              

            G0 X{x_center - (test_way*test_width/2)} Y{y_start+l*spacing} F{feedrate_travel} # go to start point of the line
            {% if loop.first %}
                  G0 E{retract_length} F{feedrate_retract} # unretract
            {% endif %}
            G0 X{x_center + (test_way*test_width/2)} E{void_area * test_width / filament_area} F{test_speed*60}  # print line 
        {% endfor %}
        
        M117 # clear display
        G0 E-{retract_length} F{feedrate_retract} # retract
        
        #
        ## Draw limits to evaluation zone
        #
        G0 Z{3.5*e_h} F{feedrate_z}
        G0 X{x_center - (width - 2*max_accel_length)/2 } F{feedrate_travel}
        G0 E{retract_length} F{feedrate_retract}
        G0 Y{y_start} E{void_area * test_length / filament_area} F{feedrate_raft}
        G0 E-{retract_length} F{feedrate_retract}
        G0 X{x_center + (width - 2*max_accel_length)/2 } F{feedrate_travel}
        G0 E{retract_length} F{feedrate_retract}
        G0 Y{y_end} E{void_area * test_length / filament_area} F{feedrate_raft}
        G0 E-{retract_length} F{feedrate_retract}

        # End elevation
        G0 Z{10} F{feedrate_z}

        RESTORE_GCODE_STATE ID=MAX_FLOW_CALIBRATION_STATE
    {% else %}
        {action_raise_error("%s temperature is under %s" % (printer.toolhead.extruder,printer.configfile.settings[printer.toolhead.extruder].min_extrude_temp)
                        + "/n MAX_FLOW_CALIBRATION cannot be done. Check your configuration.")}
    {% endif %}

[gcode_macro COMPUTE_MAX_FLOW]
gcode:
  {% set vars=printer['gcode_macro _MAX_FLOW_VARIABLES'] %}
  {% set measure = params.LENGTH|default(0)|float %}
  {% set start_flow = params.START_FLOW|default(vars.start_flow )|float %}
  {% set end_flow = params.END_FLOW|default(vars.end_flow )|float %}
  {% set test_length = params.TEST_LENGTH|default(vars.test_length)|float %}
  {% if measure > test_length %}
    {action_raise_error("Measure should be smaller than test %s" % vars.test_length)}
  {% endif %}
  {action_respond_info("Computed Max flow : %.2f mm^3/s" % (start_flow + (measure/test_length)*(end_flow - start_flow)))}